{
  "CODE": "en",
  "hero-title": "Draw in RN like a Pro",
  "hero-description": "Unique tools, optimized performance, and minimalist code",
  "code-sample-title": "Drawing in React Native has never been easier",
  "pencil": "Pencil",
  "pencil-description": "Ultra-thin stroke for precise details in any project",
  "dynamic-spray": "Dynamic Spray",
  "dynamic-spray-description": "Customizable particle effects with full control",
  "animated-filler": "Animated Filler",
  "animated-filler-description": "Smooth animations optimized for all devices",
  "history-title": "Never Forget Your History",
  "history-description": "Access the full history of your changes. Undo and redo without limits",
  "tools-sample-title": "All Tools",
  "zoom": "Zoom",
  "eye-dropper": "Eye Dropper",
  "spray": "Spray",
  "pen": "Pen",
  "tape": "Tape",
  "eraser": "Eraser",
  "filler": "Filler",
  "performance-title": "Exceptional Performance",
  "performance-subtitle": "Optimized to be light and fluid",
  "performance-show": "FPS performance by scenario",
  "stroking": "Stroking",
  "auto-save": "Auto Save",
  "filling": "Filling",
  "animated-filling": "Animated Filling",
  "page-not-found-title": "Page not found",
  "page-not-found-alert": "Oops! Page not found",
  "page-not-found": "It looks like you tried to draw outside the canvas. The page you're looking for doesn't exist or has been moved.",
  "come-home": "Go back home",
  "language": "Language $1",
  "change-language": "Change Language",
  "language-es": "Spanish",
  "language-en": "English",
  "language-system": "System",
  "theme": "Theme $1",
  "change-theme": "Change Theme",
  "theme-light": "Light",
  "theme-dark": "Dark",
  "theme-system": "System",
  "history-memory-usage-disclaimer": "The limits on the number of snapshots (versions) in history are set based on the device's total memory.",
  "performance-disclaimer": "Metrics obtained on a Galaxy A20 (SM-A205G). Final performance depends on the device running the app.",
  "copyright-statement": "All rights reserved",
  "docs-installing-title": "Installation",
  "docs-installing-how-to-use": "To use `rect-native-drawing` in your Expo project [This library has been tested on Expo SDK 51 and 52], you must install it using the following commands:",
  "docs-installing-installation-importance": "This ensures the installation of the library and its dependencies for the version of Expo you are using.",
  "docs-getting-started-title": "Getting Started",
  "docs-getting-started-import-instruction": "To use the drawing canvas in your project you need to import the Draw component",
  "docs-getting-started-required-props-heading": "Required Props",
  "docs-getting-started-required-props-description": "The drawing canvas requires some props to work properly: **resolution**, **color** and **tool**.",
  "docs-getting-started-resolution-heading": "Resolution",
  "docs-getting-started-resolution-description": "Represents the number of horizontal pixels[Default aspect ratio will be 1:1 (square)] that the image will contain. Increasing this value improves image quality and resource requirements.",
  "docs-getting-started-color-heading": "Color",
  "docs-getting-started-color-description": "Defines the value with which drawing will be performed.",
  "docs-getting-started-tool-heading": "Tool",
  "docs-getting-started-tool-description": "Current tool that will identify the type of stroke.",
  "docs-getting-started-load-event-heading": "Load Event",
  "docs-getting-started-load-event-description": "Another important concept is the **Load** event, which will be triggered when the drawing canvas is ready to render images, and therefore, drawing can begin.\nThe **onLoad** callback receives a `LoadEvent` object, whose `target` property is the reference to the drawing canvas that generated the event.",
  "docs-image-layout-title": "Image and Layout",
  "docs-image-layout-resolution": "Resolution",
  "docs-image-layout-resolution-description": "The **resolution** prop represents the number of horizontal pixels in the drawing area. If changed, existing content will be scaled and new strokes will adopt the new definition.",
  "docs-image-layout-dimensions": "Dimensions",
  "docs-image-layout-dimensions-description": "The drawing view dimensions are defined by the **width** prop, which accepts any valid React Native style value. To modify the dimensions, only **width** needs to be specified, as the aspect ratio will determine the height.",
  "docs-image-layout-aspect-ratio": "Aspect Ratio",
  "docs-image-layout-aspect-ratio-description": "The aspect ratio is set by the optional **aspectRatio** prop. Its default value is 1 (square). The recommended way to define the aspect ratio is using a `width / height` fraction. Changing the aspect ratio may crop the lower content or expand the drawing area to fit the new value.",
  "docs-image-layout-warning": "It is not recommended to modify these props (resolution, width, aspectRatio) during drawing, as they are designed to remain fixed. Changes may cause visual inconsistencies.",
  "docs-image-layout-image-quality": "Image Quality",
  "docs-image-layout-image-quality-description": "Drawing at a low resolution may show antialiasing effects. To disable this smoothing (showing natural pixelation instead), set the **antialiasing** prop to `false`.",
  "docs-grid-title": "Grid",
  "docs-grid-description": "You can set up a grid using the **grid** prop. It can receive a single value, which will represent the number of cells to divide the visible space both horizontally and vertically, or it can receive a tuple `[ number, number ]`, where the first number represents the number of horizontal cells and the second the number of vertical cells.",
  "docs-grid-example-square": "Square grid example (3x3)",
  "docs-grid-example-rectangle": "Grid example (4x5)",
  "docs-stroke-tools-title": "Stroke Tools",
  "docs-stroke-tools-intro": "Stroke tools allow you to create lines.",
  "docs-stroke-tools-usage-info": "To use a tool, you must import the Tool enum and pass it to the Draw component's tool prop.",
  "docs-stroke-tools-pencil-description": "The pencil is used through the value `Tool.PENCIL`. This tool can create continuous strokes, with rounded edges and no transparency.",
  "docs-stroke-tools-pencil-warning": "If the color code contains an alpha channel, it will be ignored for this tool.",
  "docs-stroke-tools-eraser-description": "The eraser removes drawing where it passes, maintaining a \"stroke\" with qualities similar to the pencil. Its value is `Tool.ERASER`.",
  "docs-stroke-tools-eraser-warning": "The color code is ignored when the eraser is in use.",
  "docs-stroke-tools-tape-description": "The adhesive tape `Tool.TAPE` has an irregular stroke, showing angled cuts when changing direction; it supports transparency and has straight edges (creating a rectangular-shaped stroke).",
  "docs-stroke-tools-tool-size": "Tool Size",
  "docs-stroke-tools-toolsize-description": "It is specified by the *prop* **toolSize** (default is 4 pixels). Its purpose is to assign a customizable size to the stroke of the tool being used.",
  "docs-dot-tools-title": "Dot Tools",
  "docs-dot-tools-info-usage": "To use a tool you must import the Tool enum and pass it to the Draw component's tool prop.",
  "docs-dot-tools-subtitle-dot-pen": "Dot Pen",
  "docs-dot-tools-description-dot-pen": "`Tool.DOT_PEN` allows creating dots in specific locations with customizable size and color.",
  "docs-dot-tools-subtitle-square-dot-pen": "Square Dot Pen",
  "docs-dot-tools-description-square-dot-pen": "`Tool.SQUARE_DOT_PEN` has the same features as the regular Dot Pen, except it creates square-shaped dots.",
  "docs-spray-title": "Spray",
  "docs-spray-description": "This tool disperses random particles in a given area. Its value is `Tool.SPRAY`",
  "docs-spray-control-title": "Spray Control",
  "docs-spray-control": "The **sprayParticles** *prop* allows controlling the scale and quantity of Spray particles through an object with these properties:",
  "docs-spray-size-variation-title": "Size Variation",
  "docs-spray-size-variation": "The **toolSize** *prop* can also vary the Spray dispersion, so controlling these values can achieve varied effects.",
  "docs-filler-title": "Filler",
  "docs-filler-intro": "With this tool you can change the color of an entire area (with the same color) with a single touch. Its value is `Tool.FILLER`.",
  "docs-filler-warning-alpha": "If the color code contains an alpha channel, it will be ignored for this tool",
  "docs-filler-warning-multiple-touches": "If the canvas is touched at multiple points simultaneously, the first detected touch action will be rendered. For progressive touches, they will render in order when the previous action finishes.",
  "docs-filler-warning-canvas-lock": "It's recommended to lock canvas interaction while the filler is executing to prevent errors.",
  "docs-filler-lock-tip": "[A custom method to lock the canvas should be implemented]",
  "docs-filler-info-toolsize": "toolSize won't affect the filler",
  "docs-filler-subtitle-animation": "Animating the Filler",
  "docs-filler-animation-description": "By default the filler waits a moment (processes) and applies changes, however this process can be made more visually appealing using the **animatedFiller** prop (setting it to `true`), which will trigger a circular expansion animation starting from the next touch.",
  "docs-filler-warning-animation-performance": "Using animation, while visually attractive, will make the process slower",
  "docs-filler-subtitle-filling-event": "FillingEvent",
  "docs-filler-filling-event-description": "Every time the filler starts and finishes a task it emits a `FillingEvent`, which can be captured through the **onFilling** prop. Each `FillingEvent` contains the properties **target** (triggering canvas), **isStarting**, **isEnding**, **x**, **y**, and **color**.",
  "docs-aux-tools-title": "Auxiliary Tools",
  "docs-aux-tools-description": "These tools are not capable of creating drawings, however they are necessary to properly manipulate and observe the drawing in certain scenarios.",
  "docs-aux-tools-none-subtitle": "None",
  "docs-aux-tools-none-description": "`Tool.NONE` Disables any drawing action, allowing the canvas to be touched without risk of manipulation.",
  "docs-aux-tools-zoom-subtitle": "Zoom",
  "docs-aux-tools-zoom-description": "`Tool.ZOOM` Enables zoom/scroll capabilities in the view to change perspective without modification risk [If grid is active, it will also move with scroll].",
  "docs-aux-tools-scrollevent-subtitle": "ScrollEvent",
  "docs-aux-tools-scrollevent-description": "When scrolling the visible area of the drawing, a `ScrollEvent` is emitted. This can be captured by the *prop* **onScroll** and contains the properties: **target** (emitting canvas), **x**, **y** (represent current view section coordinates), **scale** (zoom multiplier from original container), **view** (object with **width** and **height** indicating current view size)",
  "docs-aux-tools-scrollevent-info": "This event uses pixels as measurement unit and always references the drawing's specified resolution.",
  "docs-aux-tools-eyedropper-subtitle": "Eyedropper (EyeDropperEvent)",
  "docs-aux-tools-eyedropper-description": "`Tool.EYE_DROPPER` triggers an `EyeDropperEvent` every time the drawing canvas is touched while active. The `EyeDropperEvent` contains **target** and **color** properties. The purpose of this mechanic is to extract specific colors from the drawing for identification and reuse."
}
