[
  {
    "type": "p",
    "text": "docs-draw-ref-intro"
  },
  {
    "type": "code",
    "code": "import { Draw, Tool } from 'react-native-drawing'\nimport { ReactElement, useEffect, useRef } from 'react'\n\nconst App = (): ReactElement => {\n\n  const drawRef = useRef( null )\n\n  useEffect( () => {\n    const draw: Draw = drawRef.current!\n    // ...\n  }, [ drawRef ] )\n  \n  return (\n    <Draw\n      ref={ drawRef }\n      resolution={ 720 }\n      color=\"lightblue\"\n      tool={ Tool.PENCIL } />\n  )\n\n}\n\nexport default App\n",
    "language": "tsx",
    "fileName": "App.tsx",
    "maximizable": true
  },
  {
    "type": "subtitle",
    "text": "docs-draw-ref-properties-subtitle"
  },
  {
    "type": "p",
    "text": "docs-draw-ref-properties-text"
  },
  {
    "type": "subtitle",
    "text": "docs-draw-ref-ready-subtitle"
  },
  {
    "type": "p",
    "text": "docs-draw-ref-ready-text"
  },
  {
    "type": "subtitle",
    "text": "docs-draw-ref-clear-subtitle"
  },
  {
    "type": "p",
    "text": "docs-draw-ref-clear-text"
  },
  {
    "type": "code",
    "code": "import { Draw, Tool } from 'react-native-drawing'\nimport { ReactElement, useEffect, useRef } from 'react'\n\nconst App = (): ReactElement => {\n\n  const drawRef = useRef( null )\n\n  useEffect( () => {\n    const draw: Draw = drawRef.current!\n    draw.clear()\n  }, [ drawRef ] )\n  \n  return (\n    <Draw\n      ref={ drawRef }\n      resolution={ 720 }\n      color=\"red\"\n      tool={ Tool.PENCIL } />\n  )\n\n}\n\nexport default App\n",
    "language": "tsx",
    "fileName": "App.tsx",
    "maximizable": true
  },
  {
    "type": "subtitle",
    "text": "docs-draw-ref-image-getter-setter-subtitle"
  },
  {
    "type": "p",
    "text": "docs-draw-ref-image-getter-setter-text"
  },
  {
    "type": "warning",
    "text": "docs-draw-ref-performance-warning"
  },
  {
    "type": "p",
    "text": "docs-draw-ref-performance-warning-cause"
  },
  {
    "type": "subtitle",
    "text": "docs-draw-ref-events-subtitle"
  },
  {
    "type": "p",
    "text": "docs-draw-ref-events-text"
  },
  {
    "type": "code",
    "code": "import { Draw, EyeDropperEvent, Tool } from 'react-native-drawing'\nimport { ReactElement, useCallback, useEffect, useRef, useState } from 'react'\nimport { Text } from 'react-native'\n\nconst App = (): ReactElement => {\n\n  const [ color, setColor ] = useState( 'None' )\n  const drawRef = useRef( null )\n\n  const updateColor = useCallback( ( event:EyeDropperEvent ) => {\n    const { color } = event\n    setColor( color )\n  }, [] )\n\n  useEffect( () => {\n    const draw: Draw = drawRef.current!\n    draw.addEventListener( 'eye-dropper', updateColor )\n    return () => draw.removeEventListener( 'eye-dropper', updateColor )\n  }, [ drawRef, updateColor ] )\n  \n  return (\n    <>\n      <Text>Selected Color: { color }</Text>\n      <Draw\n        ref={ drawRef }\n        resolution={ 720 }\n        aspectRatio={ 9 / 16 }\n        color=\"blue\"\n        tool={ Tool.EYE_DROPPER }\n        toolSize={ 80 } />\n    </>\n  )\n\n}\n\nexport default App\n",
    "language": "tsx",
    "fileName": "App.tsx",
    "maximizable": true,
    "preview": "/docs/previews/eye_dropper.mp4"
  }
]
